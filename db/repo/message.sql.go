// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkPaymentStatus = `-- name: CheckPaymentStatus :one
SELECT payment_status FROM payments
WHERE transaction_reference = $1
`

func (q *Queries) CheckPaymentStatus(ctx context.Context, transactionReference *string) (*string, error) {
	row := q.db.QueryRow(ctx, checkPaymentStatus, transactionReference)
	var payment_status *string
	err := row.Scan(&payment_status)
	return payment_status, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    customer_id,
    total_amount,
    shipping_address,
    billing_address
)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateOrderParams struct {
	CustomerID      *int32         `json:"customer_id"`
	TotalAmount     pgtype.Numeric `json:"total_amount"`
	ShippingAddress string         `json:"shipping_address"`
	BillingAddress  string         `json:"billing_address"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerID,
		arg.TotalAmount,
		arg.ShippingAddress,
		arg.BillingAddress,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createOrderItems = `-- name: CreateOrderItems :one
INSERT INTO order_items (
    order_id,
    product_id,
    variation_id,
    quantity,
    price
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateOrderItemsParams struct {
	OrderID     *int32         `json:"order_id"`
	ProductID   *int32         `json:"product_id"`
	VariationID *int32         `json:"variation_id"`
	Quantity    int32          `json:"quantity"`
	Price       pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateOrderItems(ctx context.Context, arg CreateOrderItemsParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrderItems,
		arg.OrderID,
		arg.ProductID,
		arg.VariationID,
		arg.Quantity,
		arg.Price,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payments (
    order_id,
    amount,
    payment_method,
    transaction_reference
)
VALUES ($1, $2, $3, $4)
`

type CreatePaymentParams struct {
	OrderID              *int32         `json:"order_id"`
	Amount               pgtype.Numeric `json:"amount"`
	PaymentMethod        *string        `json:"payment_method"`
	TransactionReference *string        `json:"transaction_reference"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.Exec(ctx, createPayment,
		arg.OrderID,
		arg.Amount,
		arg.PaymentMethod,
		arg.TransactionReference,
	)
	return err
}

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_categories (name, slug)
VALUES ($1, $2)
RETURNING id, name, slug, created_at, updated_at
`

type CreateProductCategoryParams struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, createProductCategory, arg.Name, arg.Slug)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProductGallery = `-- name: CreateProductGallery :exec
INSERT INTO product_gallery (
    product_id,
    image_url
)
VALUES ($1, $2)
`

type CreateProductGalleryParams struct {
	ProductID *int32 `json:"product_id"`
	ImageUrl  string `json:"image_url"`
}

func (q *Queries) CreateProductGallery(ctx context.Context, arg CreateProductGalleryParams) error {
	_, err := q.db.Exec(ctx, createProductGallery, arg.ProductID, arg.ImageUrl)
	return err
}

const createProductVariation = `-- name: CreateProductVariation :one
INSERT INTO product_variations (
    product_id,
    variation_name,
    variation_value,
    regular_price,
    sale_price,
    sku,
    stock_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreateProductVariationParams struct {
	ProductID      *int32         `json:"product_id"`
	VariationName  string         `json:"variation_name"`
	VariationValue string         `json:"variation_value"`
	RegularPrice   pgtype.Numeric `json:"regular_price"`
	SalePrice      pgtype.Numeric `json:"sale_price"`
	Sku            *string        `json:"sku"`
	StockID        *int32         `json:"stock_id"`
}

func (q *Queries) CreateProductVariation(ctx context.Context, arg CreateProductVariationParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProductVariation,
		arg.ProductID,
		arg.VariationName,
		arg.VariationValue,
		arg.RegularPrice,
		arg.SalePrice,
		arg.Sku,
		arg.StockID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createSingleProduct = `-- name: CreateSingleProduct :one
INSERT INTO products (
    category_id,
    name,
    slug,
    description,
    type,
    regular_price,
    sale_price,
    sku,
    stock_id,
    main_image_url
)
VALUES ($1, $2, $3, $4, 'single', $5, $6, $7, $8, $9)
RETURNING id
`

type CreateSingleProductParams struct {
	CategoryID   *int32         `json:"category_id"`
	Name         string         `json:"name"`
	Slug         string         `json:"slug"`
	Description  string         `json:"description"`
	RegularPrice pgtype.Numeric `json:"regular_price"`
	SalePrice    pgtype.Numeric `json:"sale_price"`
	Sku          *string        `json:"sku"`
	StockID      *int32         `json:"stock_id"`
	MainImageUrl *string        `json:"main_image_url"`
}

func (q *Queries) CreateSingleProduct(ctx context.Context, arg CreateSingleProductParams) (int32, error) {
	row := q.db.QueryRow(ctx, createSingleProduct,
		arg.CategoryID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.RegularPrice,
		arg.SalePrice,
		arg.Sku,
		arg.StockID,
		arg.MainImageUrl,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createStock = `-- name: CreateStock :one
INSERT INTO stock (
    quantity,
    low_stock_threshold
)
VALUES ($1, $2)
RETURNING id
`

type CreateStockParams struct {
	Quantity          int32  `json:"quantity"`
	LowStockThreshold *int32 `json:"low_stock_threshold"`
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStock, arg.Quantity, arg.LowStockThreshold)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createVariableProduct = `-- name: CreateVariableProduct :one
INSERT INTO products (
    category_id,
    name,
    slug,
    description,
    type,
    main_image_url
)
VALUES ($1, $2, $3, $4, 'variable', $5)
RETURNING id
`

type CreateVariableProductParams struct {
	CategoryID   *int32  `json:"category_id"`
	Name         string  `json:"name"`
	Slug         string  `json:"slug"`
	Description  string  `json:"description"`
	MainImageUrl *string `json:"main_image_url"`
}

func (q *Queries) CreateVariableProduct(ctx context.Context, arg CreateVariableProductParams) (int32, error) {
	row := q.db.QueryRow(ctx, createVariableProduct,
		arg.CategoryID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.MainImageUrl,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getMessageByThreadPaginated = `-- name: GetMessageByThreadPaginated :many
SELECT id, content, created_at, thread_id FROM message
WHERE thread_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetMessageByThreadPaginatedParams struct {
	ThreadID int32 `json:"thread_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) GetMessageByThreadPaginated(ctx context.Context, arg GetMessageByThreadPaginatedParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessageByThreadPaginated, arg.ThreadID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.ThreadID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2
WHERE id = $1
RETURNING id, customer_id, total_amount, status, shipping_address, billing_address, placed_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     int32   `json:"id"`
	Status *string `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TotalAmount,
		&i.Status,
		&i.ShippingAddress,
		&i.BillingAddress,
		&i.PlacedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments
SET payment_status = $2, paid_at = CURRENT_TIMESTAMP
WHERE transaction_reference = $1
RETURNING id, order_id, amount, payment_method, payment_status, transaction_reference, paid_at
`

type UpdatePaymentStatusParams struct {
	TransactionReference *string `json:"transaction_reference"`
	PaymentStatus        *string `json:"payment_status"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePaymentStatus, arg.TransactionReference, arg.PaymentStatus)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.TransactionReference,
		&i.PaidAt,
	)
	return i, err
}
